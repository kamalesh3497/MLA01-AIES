import math
import random
def objective_function(x):
    """Example objective function to be optimized."""
    return -(x**2)  
def simulated_annealing(initial_solution, temperature, cooling_rate, max_iterations):
    current_solution = initial_solution
    current_value = objective_function(current_solution)
    for iteration in range(max_iterations):
        neighbor_solution = current_solution + random.uniform(-1, 1)
        neighbor_value = objective_function(neighbor_solution)
        probability = math.exp((neighbor_value - current_value) / temperature)
        if random.uniform(0, 1) < probability:
            current_solution = neighbor_solution
            current_value = neighbor_value
        temperature *= cooling_rate
    return current_solution, current_value
if __name__ == "__main__":
    initial_solution = random.uniform(-10, 10)
    initial_temperature = 1000.0
    cooling_rate = 0.95
    max_iterations = 1000
    best_solution, best_value = simulated_annealing(initial_solution, initial_temperature, cooling_rate, max_iterations)
    print(f"Best solution: {best_solution}")
    print(f"Objective value at best solution: {best_value}")

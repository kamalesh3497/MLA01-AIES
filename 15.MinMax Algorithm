import copy

def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

def evaluate(board):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all(cell == 'X' for cell in row):
            return 10
        elif all(cell == 'O' for cell in row):
            return -10

    for col in range(3):
        if all(board[row][col] == 'X' for row in range(3)):
            return 10
        elif all(board[row][col] == 'O' for row in range(3)):
            return -10

    if all(board[i][i] == 'X' for i in range(3)) or all(board[i][2 - i] == 'X' for i in range(3)):
        return 10
    elif all(board[i][i] == 'O' for i in range(3)) or all(board[i][2 - i] == 'O' for i in range(3)):
        return -10

    return 0  
def is_moves_left(board):
    return any(' ' in row for row in board)

def minimax(board, depth, is_maximizing):
    score = evaluate(board)

    if score == 10:
        return score - depth
    elif score == -10:
        return score + depth
    elif not is_moves_left(board):
        return 0

    if is_maximizing:
        best = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    best = max(best, minimax(board, depth + 1, not is_maximizing))
                    board[i][j] = ' '
        return best
    else:
        best = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    best = min(best, minimax(board, depth + 1, not is_maximizing))
                    board[i][j] = ' '
        return best

def find_best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = minimax(board, 0, False)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    while is_moves_left(board):
        print_board(board)
        player_row = int(input("Enter row (0, 1, or 2): "))
        player_col = int(input("Enter column (0, 1, or 2): "))
        if board[player_row][player_col] != ' ':
            print("Cell already taken. Try again.")
            continue
        board[player_row][player_col] = 'O'
        if evaluate(board) == -10:
            print_board(board)
            print("You win!")
            return

        print_board(board)
        ai_row, ai_col = find_best_move(board)
        print(f"AI's move: Row {ai_row}, Column {ai_col}")
        board[ai_row][ai_col] = 'X'
        if evaluate(board) == 10:
            print_board(board)
            print("AI wins!")
            return
    print_board(board)
    print("It's a draw!")

if __name__ == "__main__":
    play_tic_tac_toe()
